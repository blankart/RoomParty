generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id         String @id @default(cuid())
  provider   String
  providerId String
  userId     String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Room       Room[]
}

model User {
  id            String          @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  picture       String?
  accounts      Account[]
  roomId        String?
  Room          Room?           @relation(fields: [roomId], references: [id])
  Chat          Chat[]
  FavoritedRoom FavoritedRoom[]
}

model FavoritedRoom {
  id     String @id @default(cuid())
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Room {
  id                   String          @id @default(cuid())
  roomIdentificationId String          @unique
  name                 String
  createdAt            DateTime        @default(now())
  playerStatus         Json?
  owner                Account?        @relation(fields: [accountId], references: [id], onDelete: Cascade)
  thumbnailUrl         String?
  chats                Chat[]
  private              Boolean         @default(false)
  password             String?
  videoPlatform        VideoPlatform   @default(Youtube)
  description          String?
  onlineGuests         Int[]           @default([])
  onlineUsers          User[]
  accountId            String?
  draft                Boolean         @default(true)
  FavoritedRoom        FavoritedRoom[]
}

model Chat {
  id              String   @id @default(cuid())
  name            String
  message         String
  createdAt       DateTime @default(now())
  roomId          String
  isSystemMessage Boolean? @default(false)
  room            Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user            User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String?
}

enum VideoPlatform {
  Youtube
}
